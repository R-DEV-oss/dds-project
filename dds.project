#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    char url[100];
    struct Node* prev;
    struct Node* next;
};

struct Node* head = NULL;
struct Node* tail = NULL;
struct Node* current = NULL;

struct Node* createNode(char* url) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    strcpy(newNode->url, url);
    newNode->prev = newNode->next = NULL;
    return newNode;
}

void visit(char* url) {
    struct Node* newNode = createNode(url);
    if (head == NULL) {
        head = tail = current = newNode;
    } else {
        tail->next = newNode;
        newNode->prev = tail;
        tail = newNode;
        current = newNode;
    }
    printf("Visited: %s\n", url);
}

void delete(char* url) {
    struct Node* temp = head;
    while (temp != NULL) {
        if (strcmp(temp->url, url) == 0) {
            if (temp->prev != NULL) temp->prev->next = temp->next;
            else head = temp->next;

            if (temp->next != NULL) temp->next->prev = temp->prev;
            else tail = temp->prev;

            free(temp);
            printf("Deleted: %s\n", url);
            return;
        }
        temp = temp->next;
    }
    printf("URL not found!\n");
}

void display() {
    if (head == NULL) {
        printf("History is empty.\n");
        return;
    }
    struct Node* temp = head;
    printf("Browser History:\n");
    while (temp != NULL) {
        printf("%s -> ", temp->url);
        temp = temp->next;
    }
    printf("END\n");
}

void forward() {
    if (current != NULL && current->next != NULL) {
        current = current->next;
        printf("Moved Forward to: %s\n", current->url);
    } else {
        printf("No forward history available.\n");
    }
}

void backward() {
    if (current != NULL && current->prev != NULL) {
        current = current->prev;
        printf("Moved Backward to: %s\n", current->url);
    } else {
        printf("No backward history available.\n");
    }
}

void clear() {
    struct Node* temp = head;
    while (temp != NULL) {
        struct Node* del = temp;
        temp = temp->next;
        free(del);
    }
    head = tail = current = NULL;
    printf("History Cleared!\n");
}

void search(char* url) {
    struct Node* temp = head;
    int pos = 1;
    while (temp != NULL) {
        if (strcmp(temp->url, url) == 0) {
            printf("Found %s at position %d\n", url, pos);
            return;
        }
        temp = temp->next;
        pos++;
    }
    printf("URL not found!\n");
}

void sort() {
    if (head == NULL) return;
    int swapped;
    do {
        swapped = 0;
        struct Node* temp = head;
        while (temp->next != NULL) {
            if (strcmp(temp->url, temp->next->url) > 0) {
                char t[100];
                strcpy(t, temp->url);
                strcpy(temp->url, temp->next->url);
                strcpy(temp->next->url, t);
                swapped = 1;
            }
            temp = temp->next;
        }
    } while (swapped);
    printf("History sorted alphabetically.\n");
}

int main() {
    int choice;
    char url[100];

    do {
        printf("\n--- Browser History Manager ---\n");
        printf("1. Visit Website\n");
        printf("2. Delete Website\n");
        printf("3. Display History\n");
        printf("4. Forward\n");
        printf("5. Backward\n");
        printf("6. Clear History\n");
        printf("7. Search Website\n");
        printf("8. Sort History\n");
        printf("0. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);
        getchar();

        switch (choice) {
            case 1:
                printf("Enter URL: ");
                gets(url);
                visit(url);
                break;
            case 2:
                printf("Enter URL to delete: ");
                gets(url);
                delete(url);
                break;
            case 3:
                display();
                break;
            case 4:
                forward();
                break;
            case 5:
                backward();
                break;
            case 6:
                clear();
                break;
            case 7:
                printf("Enter URL to search: ");
                gets(url);
                search(url);
                break;
            case 8:
                sort();
                break;
            case 0:
                printf("Exiting Browser History Manager...\n");
                clear();
                break;
            default:
                printf("Invalid choice!\n");
        }
    } while (choice != 0);

    return 0;
}
